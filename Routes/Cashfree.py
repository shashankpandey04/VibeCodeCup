from cashfree_pg.models.create_order_request import CreateOrderRequest
from cashfree_pg.api_client import Cashfree
from cashfree_pg.models.customer_details import CustomerDetails
from flask import Blueprint, render_template, flash, redirect, jsonify, request, session
from flask_login import login_required, current_user
from Database.Mongo import awsdb, db
from dotenv import load_dotenv
import os
import random, string, secrets

cashfree_bp = Blueprint('cashfree', __name__, url_prefix='/api/v1/cashfree')

load_dotenv()

CASHFREE_CLIENT_ID = os.getenv("CASHFREE_CLIENT_ID")
CASHFREE_CLIENT_SECRET = os.getenv("CASHFREE_CLIENT_SECRET")
CASHFREE_ENVIRONMENT = Cashfree.XSandbox if os.getenv("CASHFREE_ENVIRONMENT") == "sandbox" else Cashfree.XProduction
AWSURL = os.getenv("AWSURL")
I_API_KEY = os.getenv("INTERNAL_API_KEY")

TICKET_PRICE = 49

Cashfree.XClientId = CASHFREE_CLIENT_ID
Cashfree.XClientSecret = CASHFREE_CLIENT_SECRET
Cashfree.XEnvironment = CASHFREE_ENVIRONMENT
x_api_version = "2025-01-01"

def token_generator(size=10, chars=string.ascii_uppercase + string.digits):
    return 'vibecodeup_' + ''.join(secrets.choice(chars) for _ in range(size))

def create_order(CustomerName, CustomerEmail, CustomerPhone, OrderAmount, OrderCurrency="INR", OrderNote="Vibe Code Cup Ticket Purchase"):
    customer_details = CustomerDetails(
        customer_id=current_user.registration,
        customer_email=current_user.email,
        customer_phone=current_user.whatsapp,
        customer_name=current_user.fullname
    )
    create_order = CreateOrderRequest(
        order_amount=TICKET_PRICE,
        order_currency="INR",
        customer_details=customer_details,
        order_meta={
            "return_url": f"{AWSURL}/api/v1/cashfree/success?registration={current_user.registration}&email={current_user.email}",
        },
        order_id=token_generator(15)
    )
    try:
        response = Cashfree().PGCreateOrder(
            x_api_version=x_api_version,
            create_order_request=create_order,
        )
        return response
    except Exception as e:
        print("Exception when calling Cashfree API: %s\n" % e)
        return None

#DOCS
#https://www.cashfree.com/docs/payments/online/web/redirect

#https://www.cashfree.com/docs/api-reference/payments/latest/orders/create


#RESPONSE FIELDS of create_order
# order_id: Unique order identifier generated by the merchant

# order_status values:
# ACTIVE: Order does not have a sucessful transaction yet
# PAID: Order is PAID with one successful transaction
# EXPIRED: Order was not PAID and not it has expired. No transaction can be initiated for an EXPIRED order.

# payment_session_id: Unique payment session identifier generated by Cashfree for the order. This is required to initiate the payment.

#customer_details: Details of the customer for whom the order is created.


@cashfree_bp.route('/order/create', methods=['POST'])
@login_required
def create_order_route():
    #get I-API-KEY from headers #Internal-API-KEY
    api_key = request.headers.get('I-API-KEY')
    if api_key != I_API_KEY:
        return jsonify({
            "status": "error",
            "message": "Unauthorized"
        }), 401
    
    order_response = create_order(
        CustomerName=current_user.fullname,
        CustomerEmail=current_user.email,
        CustomerPhone=current_user.whatsapp,
        OrderAmount=TICKET_PRICE
    )
    if order_response and order_response.order_id:
        db.pending_payments.insert_one({
            "registration": current_user.registration,
            "email": current_user.email,
            "order_id": order_response.order_id,
            "payment_session_id": order_response.payment_session_id,
            "amount": TICKET_PRICE,
            "status": "PENDING"
        })
        return jsonify({
            "status": "success",
            "order_id": order_response.order_id,
            "payment_session_id": order_response.payment_session_id
        })
    else:
        return jsonify({
            "status": "error",
            "message": "Failed to create order. Please try again."
        }), 500

@cashfree_bp.route('/success', methods=['GET'])
def payment_success():
    registration = request.args.get('registration')
    email = request.args.get('email')
    order_id = request.args.get('order_id')

    payment_record = db.pending_payments.find_one({"order_id": order_id, "registration": registration, "email": email})
    if payment_record and payment_record['status'] == "PENDING":
        try:
            order_verification = Cashfree().PGFetchOrder(
                x_api_version=x_api_version,
                order_id=order_id
            )
            if order_verification and order_verification.order_status == "PAID":
                db.pending_payments.update_one(
                    {
                        "order_id": order_id,
                        "amount": TICKET_PRICE
                    },
                    {"$set": {"status": "PAID"}}
                )
                db.completed_payments.insert_one({
                    "registration": registration,
                    "email": email,
                    "order_id": order_id,
                    "amount": payment_record['amount'],
                    "status": "PAID"
                })
                flash("Payment successful! Your ticket has been booked.", "success")
                return redirect('/dashboard')
            else:
                flash("Payment verification failed. Please contact support.", "error")
                return redirect('/dashboard')
        except Exception as e:
            print("Exception when verifying order: %s\n" % e)
            flash("An error occurred while verifying your payment. Please contact support.", "error")
            return redirect('/dashboard')